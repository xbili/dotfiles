{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Lua",
    "patterns": [
        {
            "begin": "\\b(?:(local)\\s+)?(function)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:([\\.:])[a-zA-Z_][a-zA-Z0-9_]*)?)\\s*)?(\\()",
            "beginCaptures": {
                "1": {
                    "name": "keyword.local.lua"
                },
                "2": {
                    "name": "keyword.control.lua"
                },
                "3": {
                    "name": "entity.name.function.lua"
                },
                "4": {
                    "name": "punctuation.separator.parameter.lua"
                },
                "5": {
                    "name": "punctuation.definition.parameters.begin.lua"
                }
            },
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.lua"
				}
			},
            "name": "meta.function.lua",
            "patterns": [
                {
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable.parameter.function.lua"
                },
                {
                    "include": "#function_parameter"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.arguments.lua"
                }
            ]
        },
        {
            "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
            "name": "constant.numeric.integer.hexadecimal.lua"
        },
        {
            "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
            "name": "constant.numeric.float.hexadecimal.lua"
        },
        {
            "match": "(?<![\\w\\d.])(\\d[\\d_]*(\\.[\\d_]+)|\\.\\d[\\d_]*)([eE]-?\\d*)?",
            "name": "constant.numeric.float.lua"
        },
        {
            "match": "(?<![\\w\\d.])\\d[\\d_]*(?![pPeE.0-9])",
            "name": "constant.numeric.integer.lua"
        },
        {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.lua"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.lua"
                }
            },
            "name": "string.quoted.single.lua",
            "patterns": [
                {
                    "include": "#escaped_char"
                }
            ]
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.lua"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.lua"
                }
            },
            "name": "string.quoted.double.lua",
            "patterns": [
                {
                    "include": "#escaped_char"
				}
            ]
        },
        {
            "begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.other.multiline.lua"
                },
                "1": {
                    "name": "punctuation.definition.string.begin.lua"
                }
            },
            "contentName": "meta.embedded.lua",
            "end": "(\\]\\2\\])",
            "endCaptures": {
                "0": {
                    "name": "string.quoted.other.multiline.lua"
                },
                "1": {
                    "name": "punctuation.definition.string.end.lua"
                }
            },
            "patterns": [
                {
                    "include": "source.c"
                }
            ]
        },
        {
            "begin": "(?<!--)\\[(=*)\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.lua"
                }
            },
            "end": "\\]\\1\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.lua"
                }
            },
			"name": "string.quoted.other.multiline.lua"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.lua"
                }
            },
            "match": "\\A(#!).*$\\n?",
            "name": "comment.line.shebang.lua"
        },
        {
            "begin": "(^[ \\t]+)?(?=--)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.comment.leading.lua"
                }
            },
            "end": "(?!\\G)((?!^)[ \\t]+\\n)?",
            "endCaptures": {
                "1": {
                    "name": "punctuation.whitespace.comment.trailing.lua"
                }
            },
            "patterns": [
                {
                    "begin": "--- *(@[\\w]+) +",
                    "beginCaptures": {
                        "0": {
                            "name": "comment.line.lua"
                        },
                        "1": {
                            "name": "storage.type.annotation.lua"
                        }
                    },
                    "end": "(\\w+\\.[\\w.]+)?((([\\w]+) +([\\w]+))?([\\w]+)?([.\\S ]+)?)?\\n",
                    "endCaptures": {
                        "1": {
                            "name": "string.lua"
                        },
                        "4": {
                            "name": "variable.parameter.lua"
                        },
                        "5": {
                            "name": "support.type.lua"
                        },
                        "6": {
                            "name": "support.type.lua"
                        },
                        "7": {
                            "name": "comment.line.lua"
                        }
                    }
                },
                {
                    "begin": "--\\[(=*)\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.lua"
                        }
                    },
                    "end": "\\]\\1\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.lua"
                        }
                    },
                    "name": "comment.block.lua"
                },
                {
                    "begin": "--",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.lua"
                        }
                    },
                    "end": "\\n",
                    "name": "comment.line.double-dash.lua"
                }
            ]
        },
        {
            "match": "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|in|and|or|not|continue)\\b",
            "name": "keyword.control.lua"
        },
        {
            "captures": {
				"1": {
					"name": "keyword.local.lua"
                },
                "2": {
					"name": "constant.language.lua"
                },
                "3": {
					"name": "variable.other.readwrite.lua"
                },
                "4": {
					"name": "support.type.lua"
				}
			},
            "match": "\f\\b(global|local|field)\\b \\*?(game)?([\\w.]+): (\\w+)?"
        },
        {
            "name": "keyword.local.lua",
			"match": "\\blocal\\b"
        },
        {
            "begin": "\\f-> ",
            "end": "\\f",
            "patterns": [
                {
                    "match": "(\\w+): (\\w+(\\.)?\\w+)",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.function.lua"
                        },
                        "2": {
							"name": "entity.name.type.lua"
                        },
                        "3": {
							"name": "keyword.operator.other.lua"
						}
                    }
                },
                {
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "entity.name.type.lua"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.arguments.lua"
                }
            ]
        },
        {
			"captures": {
				"1": {
					"name": "keyword.control.export"
                },
                "2": {
					"name": "storage.type.lua"
                },
                "3": {
					"name": "entity.name.type.alias.lua"
				}
			},
			"match": "(\\bexport\\b\\s+)?(\\btype\\b)\\s+([\\w_]+)(<.+>)?\\s*="
        },
        {
            "match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
            "name": "keyword.operator.lua"
        },
        {
            "match": "(?<![^.]\\.|:)\\b(workspace|game|script|plugin|shared|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
            "name": "constant.language.lua"
        },
        {
            "match": "\\btrue\\b",
            "name": "constant.language.boolean.true.lua"
        },
        {
            "match": "\\bfalse\\b",
            "name": "constant.language.boolean.false.lua"
        },
        {
            "match": "\\bnil\\b",
            "name": "constant.language.nil.lua"
        },
        {
            "match": "(?<![^.]\\.|:)\\b(self)\\b",
            "name": "variable.language.self.lua"
        },
        {
            "match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|error|getfenv|getmetatable|ipairs|loadstring|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|typeof|wait|delay|settings|elapsedTime|tick|time|warn|spawn|newproxy|UserSettings)\\b(?=\\s*(?:[({\"']|\\[\\[))",
            "name": "support.function.lua"
        },
        {
            "match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield|isyieldable)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper|split|packsize|pack|unpack)|table\\.(concat|insert|maxn|remove|sort|create|find|foreach|foreachi|getn|move|pack|unpack|clear)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|tointeger|type|ult|noise|clamp|sign|sinh?|sqrt|tanh?|round)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback|profileend|profilebegin)|utf8\\.(char|codes|codepoint|len|offset|graphemes|charpattern|nfcnormalize|nfdnormalize)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift|replace|rrotate|rshift))\\b(?=\\s*(?:[({\"']|\\[\\[))",
            "name": "support.function.library.lua"
        },
        {
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
            "name": "entity.name.function.lua"
        },
        {
            "match": "\\b([A-Z_][A-Z0-9_]*)\\b",
            "name": "variable.other.constant.lua"
        },
        {
            "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
            "name": "variable.property.lua"
        },
        {
            "match": "\\b(Axes|BrickColor|CFrame|Color3|ColorSequence|ColorSequenceKeypoint|DateTime|DockWidgetPluginGuiInfo|Faces|Instance|NumberRange|NumberSequence|NumberSequenceKeypoint|PathWaypoint|PhysicalProperties|Random|Ray|RaycastParams|Rect|Region3|Region3int16|TweenInfo|UDim|UDim2|Vector2|Vector2int16|Vector3|Vector3int16)\\b",
            "name": "support.type.lua"
        },
        {
			"match": "(Enum)\\.(\\w*)\\.?(\\w*)",
			"captures": {
				"1": {
					"name": "variable.other.enummember.lua"
                },
                "2": {
					"name": "variable.other.enummember.lua"
                },
                "3": {
					"name": "variable.other.enummember.lua"
				}
			}
		},
        {
            "match": "\\b([a-zA-Z_]\\w*)\\b",
            "name": "variable.other.readwrite.js"
        }
    ],
    "repository": {
        "escaped_char": {
            "patterns": [
                {
                    "match": "\\\\[abfnrtvz\\\\\"'\\n]",
                    "name": "constant.character.escape.lua"
                },
                {
                    "match": "\\\\\\d{1,3}",
                    "name": "constant.character.escape.byte.lua"
                },
                {
                    "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
                    "name": "constant.character.escape.byte.lua"
                },
                {
                    "match": "\\\\u\\{[0-9A-Fa-f]+\\}",
                    "name": "constant.character.escape.unicode.lua"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.character.escape.lua"
                }
            ]
        },
        "function_parameter": {
            "patterns": [
                {
                    "begin": ": (\\w+(\\.)?\\w+)\\(",
                    "beginCaptures": {
						"1": {
							"name": "entity.name.type.lua"
                        },
                        "2": {
							"name": "keyword.operator.other.lua"
						}
					},
                    "contentName": "source.lua",
                    "end": "\\)",
					"patterns": [
						{
							"include": "$self"
						}
					]
                },
                {
                    "match": ": (\\w+(\\.)?\\w+)",
                    "captures": {
                        "1": {
							"name": "entity.name.type.lua"
                        },
                        "2": {
							"name": "keyword.operator.other.lua"
						}
                    }
                }
            ]
        }
    },
    "scopeName": "source.lua"
}