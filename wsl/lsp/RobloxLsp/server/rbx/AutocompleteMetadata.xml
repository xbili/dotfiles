<?xml version="1.0" encoding="UTF-8" ?>
<StudioAutocomplete>
  <LuaLibrary name="math">
    <Function name="abs" static="true">
      <returns>
        <number>The absolute value of x</number>
      </returns>
      <parameters>
        <number name="x" />
      </parameters>
      <description>Returns the absolute value of x</description>
    </Function>
    <Function name="acos" static="true">
      <returns>
        <number>The arc cosine of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the arc cosine of x</description>
    </Function>
    <Function name="asin" static="true">
      <returns>
        <number>The arc sine of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the arc sine of x</description>
    </Function>
    <Function name="atan" static="true">
      <returns>
        <number>The arc tangent of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the arc tangent of x (in radians)</description>
    </Function>
    <Function name="atan2" static="true">
      <returns>
        <number>The arc tangent of y/x (in radians)</number>
      </returns>
      <parameters>
        <number name="y"></number>
        <number name="x"></number>
      </parameters>
      <description>Returns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of x being zero.</description>
    </Function>
    <Function name="ceil" static="true">
      <returns>
        <number>The smallest integer larger than or equal to x.</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the smallest integer larger than or equal to x.</description>
    </Function>
    <Function name="clamp" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="min"></number>
        <number name="max"></number>
      </parameters>
      <description>Returns a number between min and max, inclusive.</description>
    </Function>
    <Function name="cos" static="true">
      <returns>
        <number>The cosine of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the cosine of x (assumed to be in radians).</description>
    </Function>
    <Function name="cosh" static="true">
      <returns>
        <number>The hypercolic cosine of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the hyperbolic cosine of x.</description>
    </Function>
    <Function name="deg" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the angle x (given in radians) in degrees.</description>
    </Function>
    <Function name="exp" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the value e^x.</description>
    </Function>
    <Function name="floor" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the largest integer smaller than or equal to x.</description>
    </Function>
    <Function name="fmod" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
      </parameters>
      <description>Returns the remainder of the division of x by y that rounds the quotient towards zero.</description>
    </Function>
    <Function name="frexp" static="true">
      <returns>
        <number>m</number>
        <number>e</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns m and e such that x = m2^e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).</description>
    </Function>
    <Function name="ldexp" static="true">
      <returns>
        <number>m2^e</number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="e"></number>
      </parameters>
      <description>Returns m2^e (e should be an integer).</description>
    </Function>
    <Function name="log" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="base" optional="true"></number>
      </parameters>
      <description>Returns the logarithm of x in the given base. The default for base is e (so that the function returns the natural logarithm of x).</description>
    </Function>
    <Function name="log10" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the base-10 logarithm of x.</description>
    </Function>
    <Function name="max" static="true">
      <returns>
        <number>The maximum of all arguments</number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="..." optional="true"></number>
      </parameters>
      <description>Returns the maximum value among its arguments.</description>
    </Function>
    <Function name="min" static="true">
      <returns>
        <number>The minimum of all arguments</number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="..." optional="true"></number>
      </parameters>
      <description>Returns the minimum value among its arguments.</description>
    </Function>
    <Function name="modf" static="true">
      <returns>
        <number>Integral part of x</number>
        <number>Fractional part of x</number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns two numbers, the integral part of x and the fractional part of x.</description>
    </Function>
    <Function name="noise" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y" optional="true"></number>
        <number name="z" optional="true"></number>
      </parameters>
      <description>Returns a value between -0.5 and 0.5 generated from its arguments.</description>
    </Function>
    <Function name="pow" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
      </parameters>
      <description>Returns x^y. (You can also use the expression x^y to compute this value.)</description>
    </Function>
    <Function name="rad" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the angle x (given in degrees) in radians.</description>
    </Function>
    <Function name="random" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="m"></number>
        <number name="n" optional="true"></number>
      </parameters>
      <description>
        This function is an interface to the simple pseudo-random generator function rand provided
        by ANSI C. (No guarantees can be given for its statistical properties.) When called without arguments,
        returns a uniform pseudo-random real number in the range [0,1). When called with an integer number m, math.random
        returns a uniform pseudo-random integer in the range [1, m]. When called with two integer numbers m and
        n, math.random returns a uniform pseudo-random integer in the range [m, n].
      </description>
    </Function>
    <Function name="randomseed" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Sets x as the seed for the pseudo-random generator: equal seeds produce equal sequences of numbers.</description>
    </Function>
    <Function name="sign" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns -1 if x &lt; 0, 0 if x == 0, or 1 if x &gt; 0.</description>
    </Function>
    <Function name="sin" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the sine of x (assumed to be in radians).</description>
    </Function>
    <Function name="sinh" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the hyperbolic sine of x.</description>
    </Function>
    <Function name="sqrt" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the square root of x. (You can also use the expression x^0.5 to compute this value.)</description>
    </Function>
    <Function name="tan" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the tangent of x (assumed to be in radians).</description>
    </Function>
    <Function name="tanh" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>Returns the hyperbolic tangent of x.</description>
    </Function>
    <Properties>
      <number name="huge" static="true">The value HUGE_VAL, a value larger than or equal to any other numerical value.</number>
      <number name="pi" static="true">The value of pi.</number>
    </Properties>
  </LuaLibrary>
  
  <LuaLibrary name="debug">
    <Function name="info" static="true">
      <parameters>
        <number name="level"></number>
        <string name="options"></string>
      </parameters>
      <returns>
        <value name="..."></value>
      </returns>
      <description>Returns debug information about a given stack frame or function object based on the options string (that can contain characters nslfa).</description>
    </Function>
    <Function name="traceback" static="true">
      <returns>
        <string></string>
      </returns>
      <description>Returns a traceback of the current thread, similar to the one in the output on error.</description>
    </Function>
    <Function name="profilebegin" static="true">
      <description>Opens a microprofiler label.</description>
    </Function>
    <Function name="profileend" static="true">
      <description>Closes the top microprofiler label.</description>
    </Function>
    <Function name="setmemorycategory" static="true">
      <description>Sets the memory category tag of the current thread. Future allocations performed by this thread will use this tag.</description>
    </Function>
    <Function name="resetmemorycategory" static="true">
      <description>Resets the memory category tag of the current thread to the default auto-assigned tag that was based on script name.</description>
    </Function>
  </LuaLibrary>
  
  <LuaLibrary name="string">
    <Function name="byte" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
        <number name="i" optional="true" default="1"></number>
        <number name="j" optional="true" default="i"></number>
      </parameters>
      <description>
        Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j]. The default value for
        i is 1; the default value for j is i. These indices are corrected following the same rules of function
        string.sub.
      </description>
    </Function>
    <Function name="char" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Receives zero or more integers. Returns a string with length equal to the number of arguments, in
        which each character has the internal numerical code equal to its corresponding argument.
      </description>
    </Function>
    <Function name="find" static="true">
      <returns>
        <number>The indices of s where find occured, otherwise nil</number>
      </returns>
      <parameters>
        <string name="s">String to search</string>
        <string name="pattern">Pattern to look for in s</string>
        <number name="init" optional="true" default="1">Where to start search</number>
        <number name="plain" optional="true" default="false">Whether the search should plain text search only</number>
      </parameters>
      <description>
        Looks for the first match of pattern in the string s. If it finds a match, then find
        returns the indices of s where this occurrence starts and ends; otherwise, it returns
        nil. A third, optional numerical argument init specifies where to start the search; its
        default value is 1 and can be negative. A value of true as a fourth, optional argument
        plain turns off the pattern matching facilities, so the function does a plain 'find=''
        substring=''' operation"
      </description>
    </Function>
    <Function name="format" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="formatstring"></string>
        <string name="..."></string>
      </parameters>
      <description>
        Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string).
      </description>
    </Function>
    <Function name="gmatch" static="true">
      <returns>
        <function></function>
      </returns>
      <parameters>
        <string name="s"></string>
          <string name="pattern"></string>
      </parameters>
      <description>
        Returns an iterator function that, each time it is called, returns the next captures from pattern over the string s.
      </description>
    </Function>
    <Function name="gsub" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
        <string name="pattern"></string>
        <nil name="repl">
          If repl is a string, then its value is used for replacement. If repl is a table, then the table is queried for
          every match, using the first capture as the key; if the pattern specifies no captures, then the whole match is
          used as the key. If repl is a function, then this function is called every time a match occurs, with all captured
          substrings passed as arguments, in order; if the pattern specifies no captures, then the whole match is passed as a sole argument.
        </nil>
        <string name="n" optional="true">
          Limits the maximum number of substitutions to occur
        </string>
      </parameters>
      <description>
        Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have been replaced
        by a replacement string specified by repl, which can be a string, a table, or a function. gsub also returns,
        as its second value, the total number of matches that occurred.
      </description>
    </Function>
    <Function name="len" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>Receives a string and returns its length.</description>
    </Function>
    <Function name="lower" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.</description>
    </Function>
    <Function name="match" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
        <string name="pattern"></string>
        <string name="init" optional="true"></string>
      </parameters>
      <description>
        Looks for the first match of pattern in the string s. If a match is found, it is returned; otherwise, it returns nil.
        A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative.
      </description>
    </Function>
    <Function name="rep" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
        <string name="n"></string>
        <string name="sep" optioanl="true"></string>
      </parameters>
      <description>Returns a string that is the concatenation of n copies of the string s separated by the string sep.</description>
    </Function>
    <Function name="reverse" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>Returns a string that is the string s reversed.</description>
    </Function>
    <Function name="sub" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
        <string name="i"></string>
        <string name="j" optioanl="true"></string>
      </parameters>
      <description>
        Returns the substring of s that starts at i and continues until j; i and j can be negative. If j is absent,
        then it is assumed to be equal to -1 (which is the same as the string length).
      </description>
    </Function>
    <Function name="upper" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged.</description>
    </Function>
    <Function name="split" static="true">
      <returns>
        <table></table>
      </returns>
      <parameters>
        <string name="s"></string>
        <string name="separator" optional="true"></string>
      </parameters>
      <description>Splits a string into parts based on the defined separator character(s), returning a table of ordered results. The default separator is comma (,).</description>
    </Function>
    <Function name="pack" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="fmt"></string>
        <value name="..."></value>
      </parameters>
      <description>Returns a binary string containing the values packed (that is, serialized in binary form) according to the format string fmt.</description>
    </Function>
    <Function name="packsize" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <string name="fmt"></string>
      </parameters>
      <description>Returns the size of a string resulting from string.pack with the given format. The format string cannot have the variable-length options 's' or 'z'.</description>
    </Function>
    <Function name="unpack" static="true">
      <returns>
        <value name="..."></value>
      </returns>
      <parameters>
        <string name="fmt"></string>
        <string name="s"></string>
        <number name="pos" optional="true"></number>
      </parameters>
      <description>Returns the values packed in string s (see string.pack) according to the format string fmt. An optional pos marks where to start reading in s (default is 1). After the read values, this function also returns the index of the first unread byte in s.</description>
    </Function>
  </LuaLibrary>
  
  <LuaLibrary name="table">
    <Function name="concat" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="list"></string>
        <string name="sep" optional="true"></string>
        <string name="i" optional="true"></string>
        <string name="j" optional="true"></string>
      </parameters>
      <description>
        Given a list where all elements are strings or numbers, returns the string list[i]..sep..list[i+1] ... sep..list[j].
        The default value for sep is the empty string, the default for i is 1, and the default for j is #list. If i is greater
        than j, returns the empty string.
      </description>
    </Function>
    <Function name="foreach" static="true">
      <parameters>
        <table name="table"></table>
        <function name="f"></function>
      </parameters>
      <description>Apply the function f to the elements of the table passed</description>
    </Function>
    <Function name="foreachi" static="true">
      <parameters>
        <table name="table"></table>
        <function name="f"></function>
      </parameters>
      <description>This is similar to table.foreach() except that index-value pairs are passed, not key-value pairs.</description>
    </Function>
    <Function name="getn" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <table name="table"></table>
      </parameters>
      <description>Returns the number of elements in the table passed</description>
    </Function>
    <Function name="insert" static="true">
      <parameters>
        <table name="list"></table>
        <number name="pos" optional="true"></number>
        <value name="value"></value>
      </parameters>
      <description>
        Inserts element value at position pos in list, shifting up the elements list[pos], list[pos+1], ..., list[#list].
        The default value for pos is #list+1, so that a call table.insert(t,x) inserts x at the end of list t.
      </description>
    </Function>
    <Function name="remove" static="true">
      <returns>
        <value></value>
      </returns>
      <parameters>
        <table name="list"></table>
        <number name="pos" optional="true"></number>
      </parameters>
      <description>
        Removes from list the element at position pos, returning the value of the removed element. When pos is an integer between
        1 and #list, it shifts down the elements list[pos+1], list[pos+2], ..., list[#list] and erases element list[#list]; The
        index pos can also be 0 when #list is 0, or #list + 1; in those cases, the function erases the element list[pos].
      </description>
    </Function>
    <Function name="sort" static="true">
      <returns>
        <bool></bool>
      </returns>
      <parameters>
        <table name="list"></table>
        <number name="comp" optional="true"></number>
      </parameters>
      <description>
        Sorts list elements in a given order, in-place, from list[1] to list[#list]. If comp is given, then it must be a function
        that receives two list elements and returns true when the first element must come before the second in the final order (so
        that not comp(list[i+1],list[i]) will be true after the sort). If comp is not given, then the standard Lua operator
        [less than] is used instead.
      </description>
    </Function>
    <Function name="pack" static="true">
      <returns>
        <table></table>
      </returns>
      <parameters>
        <value name="..."></value>
      </parameters>
      <description>
        Returns a new table with all arguments stored into keys 1, 2, etc. and with a field "n" with the total number of arguments.
      </description>
    </Function>
    <Function name="unpack" static="true">
      <returns>
        <value name="..."></value>
      </returns>
      <parameters>
        <table name="list"></table>
        <number name="i" optional="true"></number>
        <number name="j" optional="true"></number>
      </parameters>
      <description>
        Returns the elements from the given list between positions i and j. By default, i is 1 and j is #list.
      </description>
    </Function>
    <Function name="move" static="true">
      <returns>
        <table></table>
      </returns>
      <parameters>
        <table name="a1"></table>
        <number name="f"></number>
        <number name="e"></number>
        <number name="t"></number>
        <table name="a2" optional="true"></table>
      </parameters>
      <description>
        Moves elements from table a1 to table a2, moving elements in the positions between f and e from a1 to positions starting from t in a2.
        The default for a2 is a1. The destination range can overlap with the source range.
      </description>
    </Function>
    <Function name="create" static="true">
	  <returns>
	    <table></table>
	  </returns>
      <parameters>
        <number name="count"></number>
        <value name="value" optional="true"></value>
      </parameters>
      <description>
	    Creates an array-like table with count values, initialized to value.
	    When value is nil or omitted, the resulting table has length 0, but has preallocated storage for count elements.
      </description>
    </Function>
    <Function name="find" static="true">
	  <returns>
	    <value></value>
	  </returns>
      <parameters>
	    <table name="table"></table>
        <value name="value"></value>
        <number name="init" optional="true"></number>
      </parameters>
      <description>
	    Returns the numeric index of the first occurence of value, starting from init, or nil if value isn't present in the table.
		The default for init is 1.
      </description>
    </Function>
    <Function name="clear" static="true">
      <parameters>
        <table name="table"></table>
      </parameters>
      <description>
        Clears all keys from the table, but leaves their capacity allocated so that future keys added to the table can re-use that storage, avoiding additional allocations.
      </description>
    </Function>
  </LuaLibrary>
  
  <LuaLibrary name="coroutine">
    <Function name="create" static="true">
      <returns>
        <thread></thread>
      </returns>
      <parameters>
        <function name="f"></function>
      </parameters>
      <description>Creates a new coroutine, with body f. f must be a Lua function.</description>
    </Function>
    <Function name="resume" static="true">
      <returns>
        <bool></bool>
      </returns>
      <parameters>
        <thread name="co"></thread>
        <variant name="val1" optional="true"></variant>
        <variant name="..." optional="true"></variant>
      </parameters>
      <description>
        Starts or continues the execution of coroutine co. The first time you resume a coroutine, it starts running its body. The values
        val1, ... are passed as the arguments to the body function. If the coroutine has yielded, resume restarts it; the values val1,
        ... are passed as the results from the yield. If the coroutine runs without any errors, resume returns true plus any values
        passed to yield (if the coroutine yields) or any values returned by the body function (if the coroutine terminates). If there is
        any error, resume returns false plus the error message.
      </description>
    </Function>
    <Function name="running" static="true">
      <returns>
        <thread></thread>
      </returns>
      <description>Returns the running coroutine.</description>
    </Function>
    <Function name="status" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <thread name="co"></thread>
      </parameters>
      <description>
        Returns the status of coroutine co, as a string: 'running', if the coroutine is running (that is, it called status); 'suspended',
        if the coroutine is suspended in a call to yield, or if it has not started running yet; 'normal' if the coroutine is active but
        not running (that is, it has resumed another coroutine); and 'dead' if the coroutine has finished its body function, or if it has
        stopped with an error.
      </description>
    </Function>
    <Function name="wrap" static="true">
      <returns>
        <function></function>
      </returns>
      <parameters>
        <function name="f"></function>
      </parameters>
      <description>
        Creates a new coroutine, with body f. f must be a Lua function. Returns a function that resumes the coroutine each time it is
        called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume,
        except the first boolean. In case of error, propagates the error.
      </description>
    </Function>
    <Function name="yield" static="true">
      <parameters>
        <variant name="..."></variant>
      </parameters>
      <description>Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.</description>
    </Function>
    <Function name="isyieldable" static="true">
      <returns>
        <bool></bool>
      </returns>
      <description>
        Returns true when the running coroutine can yield.
        A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.
      </description>
    </Function>
  </LuaLibrary>
  
  <LuaLibrary name="utf8">
    <Function name="char" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Receives zero or more codepoints as integers, converts each one to its corresponding UTF-8 byte sequence and returns astring with the
        concatenation of all these sequences."
      </description>
    </Function>
    <Function name="codes" static="true">
      <returns>
        <function></function>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>
        Returns values so that the construction [for p, c in utf8.codes(s) do body end] will iterate over all codepoints in string s, with p
        being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
      </description>
    </Function>
    <Function name="codepoint" static="true">
      <returns>
        <number variable="true"></number>
      </returns>
      <parameters>
        <string name="s"></string>
        <number name="i" optional="true"></number>
        <number name="j" optional="true"></number>
      </parameters>
      <description>
        Returns the codepoints (as integers) from all codepoints in s that start between byte position i and j (both included). The default
        for i is 1 and for j is i. It raises an error if it meets any invalid byte sequence.
      </description>
    </Function>
    <Function name="len" static="true">
      <returns>
        <number></number>
        <number></number>
      </returns>
      <parameters>
        <string name="s"></string>
        <number name="i" optional="true"></number>
        <number name="j" optional="true"></number>
      </parameters>
      <description>
        Returns the number of UTF-8 codepoints in string s that start between positions i and j (both inclusive). The default for i is 1 and
        for j is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.
      </description>
    </Function>
    <Function name="offset" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <string name="s"></string>
        <number name="n"></number>
        <number name="i" optional="true"></number>
      </parameters>
      <description>
        Returns the position (in bytes) where the encoding of the n-th codepoint of s (counting from byte position i) starts. A negative n gets
        characters before position i. The default for i is 1 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the
        offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end,
        the function returns nil.
      </description>
    </Function>
    <Function name="graphemes" static="true">
      <returns>
        <iterator></iterator>
      </returns>
      <parameters>
        <string name="s"></string>
        <number name="i" optional="true"></number>
        <number name="j" optional="true"></number>
      </parameters>
      <description>
        Returns values so that `for first, last in utf8.graphemes(s) do local grapheme = s:sub(first, last) end` will iterate the grapheme
        clusters of the string.
      </description>
    </Function>
    <Function name="nfcnormalize" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>
        Converts the input string to Normal Form C, which tries to convert decomposed characters into composed characters.
      </description>
    </Function>
    <Function name="nfdnormalize" static="true">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="s"></string>
      </parameters>
      <description>
        Converts the input string to Normal Form D, which tries to break up composed characters into decomposed characters.
      </description>
    </Function>
    <Properties>
      <string name="charpattern" static="true">
        The pattern "[%z-\x7F\xC2-\xF4][\x80-\xBF]", which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
      </string>
    </Properties>
  </LuaLibrary>

  <LuaLibrary name="os">
    <Function name="time" static="true">
      <returns>
        <number></number>
      </returns>
      <description>Returns the number of seconds since the epoch (1 January 1970, 00:00:00)</description>
    </Function>
    <Function name="clock" static="true">
      <returns>
        <number></number>
      </returns>
      <description>Returns the amount of CPU time used by Lua in seconds. This value has high precision, about 1 microsecond, and is intended for use in benchmarking.</description>
    </Function>
    <Function name="difftime" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="t1"></number>
        <number name="t2"></number>
      </parameters>
      <description>Returns the number of seconds from t1 to t2</description>
    </Function>
    <Function name="date" static="true">
      <returns>
        <dictionary></dictionary>
      </returns>
      <parameters>
        <string name="formatString" optional="true"></string>
        <number name="time" optional="true"></number>
      </parameters>
      <description>
        Returns a table containing the components (year, hour, etc.) of the date. The formatString must be either *t or !*t, and time is
        the same as the return value of os.time(), defaulting to now.
      </description>
    </Function>
  </LuaLibrary>

  <LuaLibrary name="bit32">
    <Function name="arshift" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="disp"></number>
      </parameters>
      <description>
        Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left.
        This shift operation is what is called arithmetic shift. Vacant bits on the left are filled with copies of the higher bit of x; vacant bits on the right are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero or 0xFFFFFFFF (all original bits are shifted out).
      </description>
    </Function>
    <Function name="band" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Returns the bitwise and of its operands.
      </description>
    </Function>
    <Function name="bnot" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
      </parameters>
      <description>
        Returns the bitwise negation of x. Note that the result is a non-negative integer (e.g. bit32.bnot(0) = 0xFFFFFFFF, not -1)
      </description>
    </Function>
    <Function name="bor" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Returns the bitwise or of its operands.
      </description>
    </Function>
    <Function name="btest" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Returns a boolean signaling whether the bitwise and of its operands is different from zero.
      </description>
    </Function>
    <Function name="bxor" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="..."></number>
      </parameters>
      <description>
        Returns the bitwise exclusive or of its operands.
      </description>
    </Function>
    <Function name="extract" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="n"></number>
        <number name="field"></number>
        <number name="width" optional="true"></number>
      </parameters>
      <description>
        Returns the unsigned number formed by the bits field to field + width - 1 from n. Bits are numbered from 0 (least significant) to 31 (most significant). All accessed bits must be in the range [0, 31].
        The default for width is 1.
      </description>
    </Function>
    <Function name="replace" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="n"></number>
        <number name="v"></number>
        <number name="field"></number>
        <number name="width" optional="true"></number>
      </parameters>
      <description>
        Returns a copy of n with the bits field to field + width - 1 replaced by the value v. Bits are numbered from 0 (least significant) to 31 (most significant). All accessed bits must be in the range [0, 31].
        The default for width is 1.
      </description>
    </Function>
    <Function name="lrotate" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="disp"></number>
      </parameters>
      <description>
        Returns the number x rotated disp bits to the left. The number disp may be any representable integer.
        Negative displacements rotate to the right.
      </description>
    </Function>
    <Function name="lshift" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="disp"></number>
      </parameters>
      <description>
        Returns the number x shifted disp bits to the left. The number disp may be any representable integer. Negative displacements shift to the right. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).
      </description>
    </Function>
    <Function name="rrotate" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="disp"></number>
      </parameters>
      <description>
        Returns the number x rotated disp bits to the right. The number disp may be any representable integer.
        Negative displacements rotate to the left.
      </description>
    </Function>
    <Function name="rshift" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="disp"></number>
      </parameters>
      <description>
        Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).
      </description>
    </Function>

  </LuaLibrary>

  <LuaLibrary name="task">
    <Function name="synchronize" static="true">
      <returns>
      </returns>
      <parameters>
      </parameters>
      <description>
        Yields the calling script and queues it for serial execution following the completion of the parallel execution phase of the frame.
      </description>
    </Function>

    <Function name="desynchronize" static="true">
      <returns>
      </returns>
      <parameters>
      </parameters>
      <description>
        Queues the calling script to be run during the parallel execution phase of the frame.
      </description>
    </Function>

    <Function name="defer" static="true">
      <returns>
      </returns>
      <parameters>
      </parameters>
      <description>
        Defers the passed thread or function to be resumed at the end of the current resumption cycle
      </description>
    </Function>

    <Function name="spawn" static="true">
      <returns>
      </returns>
      <parameters>
      </parameters>
      <description>
        Resumes the passed thread or function instantly using the engine's scheduler
      </description>
    </Function>
  </LuaLibrary>

  <ItemStruct name="Instance">
    <Function name="new" static="true">
      <returns>
        <Instance></Instance>
      </returns>
      <parameters>
        <string name="val" constraint="Instance:isScriptCreatable"></string>
        <Instance name="parent"></Instance>
      </parameters>
      <description>Creates an new object of type val. The parent argument is optional; If it is supplied, the object will be parented to that object</description>
    </Function>
  </ItemStruct>

  <ItemStruct name="Vector2">
    <Function name="new" static="true">
      <returns>
        <Vector2></Vector2>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
      </parameters>
      <description>Creates a new Vector2 using ordinates x and y</description>
    </Function>
    <Properties>
      <number name="X">The x-coordinate</number>
      <number name="Y">The y-coordinate</number>
      <Vector2 name="Unit">A normalized copy of the vector</Vector2>
      <number name="Magnitude">The length of the vector</number>
    </Properties>
    <Function name="Lerp">
      <returns>
        <Vector2></Vector2>
      </returns>
      <parameters>
        <Vector2 name="v"></Vector2>
        <number name="alpha"></number>
      </parameters>
      <description>Returns a Vector2 linearly interpolated between this Vector2 and v by the fraction alpha</description>
    </Function>
    <Function name="Dot">
      <returns>
        <Vector2></Vector2>
      </returns>
      <parameters>
        <Vector2 name="v"></Vector2>
      </parameters>
      <description>Returns a scalar dot product of the two vectors</description>
    </Function>
    <Function name="Cross">
      <returns>
        <Vector2></Vector2>
      </returns>
      <parameters>
        <Vector2 name="other"></Vector2>
      </parameters>
      <description>Returns the cross product of the two vectors</description>
    </Function>
  </ItemStruct>

  <ItemStruct name="Vector2int16">
    <Function name="new" static="true">
      <returns>
        <Vector2int16></Vector2int16>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
      </parameters>
      <description>Creates a new Vector2int16 using ordinates x and y. Similar to Vector2, but uses integral coordinates</description>
    </Function>
    <Properties>
      <number name="X">The x-coordinate</number>
      <number name="Y">The y-coordinate</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Vector3">
    <Function name="new" static="true">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
        <number name="z"></number>
      </parameters>
      <description>Constructs a new Vector3 using coordinates x, y, z.</description>
    </Function>
    <Function name="FromNormalId" static="true">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Enum.NormalId name="normal"></Enum.NormalId>
      </parameters>
      <description>Constructs a new Vector3 in a particular direction.</description>
    </Function>
    <Function name="fromNormalId" static="true">
        <returns>
            <Vector3></Vector3>
        </returns>
        <parameters>
            <Enum.NormalId name="normal"></Enum.NormalId>
        </parameters>
        <description>Constructs a new Vector3 in a particular direction.</description>
    </Function>
    <Function name="FromAxis" static="true">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Enum.Axis name="axis"></Enum.Axis>
      </parameters>
      <description>Constructs a new Vector3 for a particular axis.</description>
    </Function>
    <Function name="fromAxis" static="true">
        <returns>
            <Vector3></Vector3>
        </returns>
        <parameters>
            <Enum.Axis name="axis"></Enum.Axis>
        </parameters>
        <description>Constructs a new Vector3 for a particular axis.</description>
    </Function>
    <Properties>
      <number name="X">The x-coordinate</number>
      <number name="Y">The y-coordinate</number>
      <number name="Z">The z-coordinate</number>
      <Vector3 name="Unit">A normalized copy of the vector - one which has the same direction as the original but a magnitude of 1</Vector3>
      <number name="Magnitude">The length of the vector</number>
    </Properties>
    <Function name="Lerp">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="goal"></Vector3>
        <number name="alpha"></number>
      </parameters>
      <description>Returns a Vector3 linearly interpolated between this Vector3 and the goal by the fraction alpha</description>
    </Function>
    <Function name="Dot">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <Vector3 name="other"></Vector3>
      </parameters>
      <description>Returns a scalar dot product of the two vectors</description>
    </Function>
    <Function name="Cross">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="other"></Vector3>
      </parameters>
      <description>Returns the cross product of the two vectors</description>
    </Function>
    <Function name="FuzzyEq">
      <returns>
        <bool></bool>
      </returns>
      <parameters>
        <Vector3 name="other"></Vector3>
        <number name="epsilon" optional="true"></number>
      </parameters>
      <description>Returns whether the two vectors are within `epsilon` of each other, defaulting to 10^-5.</description>
    </Function>
  </ItemStruct>
  

  <ItemStruct name="Vector3int16">
    <Function name="new" static="true">
      <returns>
        <Vector3int16></Vector3int16>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
        <number name="z"></number>
      </parameters>
      <description>Creates a new Vector3int16 using coordinate x, y, z.</description>
    </Function>
    <Properties>
      <number name="X">The x-coordinate</number>
      <number name="Y">The y-coordinate</number>
      <number name="Z">The z-coordinate</number>
    </Properties>
  </ItemStruct>

  <ItemStruct name="CFrame">
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <description>Creates a blank identity CFrame.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <Vector3 name="pos"></Vector3>
      </parameters>
      <description>Creates a CFrame from a Vector3</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <Vector3 name="pos"></Vector3>
        <Vector3 name="lookAt"></Vector3>
      </parameters>
      <description>Creates a CFrame located at pos with it's lookVector pointing towards the lookAt position.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
        <number name="z"></number>
      </parameters>
      <description>Creates a CFrame from position (x, y, z).</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
        <number name="z"></number>
        <number name="qX"></number>
        <number name="qY"></number>
        <number name="qZ"></number>
        <number name="qW"></number>
      </parameters>
      <description>Creates a CFrame from position (x, y, z) and quaternion (qX, qY, qZ, qW)</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="x"></number>
        <number name="y"></number>
        <number name="z"></number>
        <number name="R00"></number>
        <number name="R01"></number>
        <number name="R02"></number>
        <number name="R10"></number>
        <number name="R11"></number>
        <number name="R12"></number>
        <number name="R20"></number>
        <number name="R21"></number>
        <number name="R22"></number>
      </parameters>
      <description>
        Creates a CFrame from position (x, y, z) with an orientation specified by the rotation matrix [[R00 R01 R02] [R10 R11 R12] [R20 R21 R22]]
      </description>
    </Function>
    <Function name="fromEulerAnglesXYZ" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="rx"></number>
        <number name="ry"></number>
        <number name="rz"></number>
      </parameters>
      <description>Creates a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, Y, X order.</description>
    </Function>
    <Function name="fromEulerAnglesYXZ" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="rx"></number>
        <number name="ry"></number>
        <number name="rz"></number>
      </parameters>
      <description>Creates a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, X, Y order.</description>
    </Function>
    <Function name="Angles" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="rx"></number>
        <number name="ry"></number>
        <number name="rz"></number>
      </parameters>
      <description>Equivalent to fromEulerAnglesXYZ</description>
    </Function>
    <Function name="fromOrientation" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <number name="rx"></number>
        <number name="ry"></number>
        <number name="rz"></number>
      </parameters>
      <description>Equivalent to fromEulerAnglesYXZ</description>
    </Function>
    <Function name="fromAxisAngle" static="true">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <Vector3 name="v"></Vector3>
        <number name="r"></number>
      </parameters>
      <description>Creates a rotated CFrame from a Unit Vector3 and a rotation in radians</description>
    </Function>
    <Function name="fromMatrix" static="true">
        <returns>
            <CFrame></CFrame>
        </returns>
        <parameters>
            <Vector3 name="pos"></Vector3>
            <Vector3 name="vX"></Vector3>
            <Vector3 name="vY"></Vector3>
            <Vector3 name="vZ"></Vector3>
        </parameters>
        <description>Creates a CFrame from a translation and the columns of a rotation matrix.</description>
    </Function>
    <Function name="fromMatrix" static="true">
        <returns>
            <CFrame></CFrame>
        </returns>
        <parameters>
            <Vector3 name="pos"></Vector3>
            <Vector3 name="vX"></Vector3>
            <Vector3 name="vY"></Vector3>
        </parameters>
        <description>Creates a CFrame from a translation and two columns of a rotation matrix. The third column is calculated as [vx:Cross(vy).unit]</description>
    </Function>
    <Function name="lookAt" static="true">
        <returns>
            <CFrame></CFrame>
        </returns>
        <parameters>
            <Vector3 name="at"></Vector3>
            <Vector3 name="target"></Vector3>
        </parameters>
        <description>Creates a CFrame at a given position looking at a given target position, with an up direction of +Y.</description>
    </Function>
    <Function name="lookAt" static="true">
        <returns>
            <CFrame></CFrame>
        </returns>
        <parameters>
            <Vector3 name="at"></Vector3>
            <Vector3 name="target"></Vector3>
            <Vector3 name="up"></Vector3>
        </parameters>
        <description>Creates a CFrame at a given position looking at a given target position, with a specific programmer provided up direction.</description>
    </Function>
    <Properties>
      <number name="Position">The 3D position of the CFrame</number>
      <number name="X">The x-coordinate of the position</number>
      <number name="Y">The y-coordinate of the position</number>
      <number name="Z">The z-coordinate of the position</number>
      <Vector3 name="LookVector">The forward-direction component of the CFrame's orientation.</Vector3>
      <Vector3 name="RightVector">The right-direction component of the CFrame's orientation.</Vector3>
      <Vector3 name="UpVector">The up-direction component of the CFrame's orientation.</Vector3>
      <Vector3 name="XVector">The first column of the CFrame's rotation matrix.</Vector3>
      <Vector3 name="YVector">The second column of the CFrame's rotation matrix.</Vector3>
      <Vector3 name="ZVector">The third column of the CFrame's rotation matrix.</Vector3>
    </Properties>
    <Function name="Inverse">
      <returns>
        <CFrame></CFrame>
      </returns>
      <description>Returns the inverse of this CFrame</description>
    </Function>
    <Function name="Lerp">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <CFrame name="goal"></CFrame>
        <number name="alpha"></number>
      </parameters>
      <description>Returns a CFrame interpolated between this CFrame and the goal by the fraction alpha</description>
    </Function>
    <Function name="ToWorldSpace">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <CFrame name="cf"></CFrame>
      </parameters>
      <description>Returns a CFrame transformed from Object to World space. Equivalent to [CFrame * cf]</description>
    </Function>
    <Function name="ToObjectSpace">
      <returns>
        <CFrame></CFrame>
      </returns>
      <parameters>
        <CFrame name="cf"></CFrame>
      </parameters>
      <description>Returns a CFrame transformed from World to Object space. Equivalent to [CFrame:Inverse() * cf]</description>
    </Function>
    <Function name="PointToWorldSpace">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="v3"></Vector3>
      </parameters>
      <description>Returns a Vector3 transformed from Object to World space. Equivalent to [CFrame * v3]</description>
    </Function>
    <Function name="PointToObjectSpace">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="v3"></Vector3>
      </parameters>
      <description>Returns a Vector3 transformed from World to Object space. Equivalent to [CFrame:Inverse() * v3]</description>
    </Function>
    <Function name="VectorToWorldSpace">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="v3"></Vector3>
      </parameters>
      <description>Returns a Vector3 rotated from Object to World space. Equivalent to [(CFrame - CFrame.Position) *v3]</description>
    </Function>
    <Function name="VectorToObjectSpace">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="v3"></Vector3>
      </parameters>
      <description>Returns a Vector3 rotated from World to Object space. Equivalent to [(CFrame:Inverse() - CFrame:Inverse().Position) * v3]</description>
    </Function>
    <Function name="GetComponents">
      <returns>
        <number>x</number>
        <number>y</number>
        <number>z</number>
        <number>R00</number>
        <number>R01</number>
        <number>R02</number>
        <number>R10</number>
        <number>R11</number>
        <number>R12</number>
        <number>R20</number>
        <number>R21</number>
        <number>R22</number>
      </returns>
      <description>Returns the values: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22</description>
    </Function>
    <Function name="Orthonormalize">
      <returns>
        <CFrame>orthonormalized</CFrame>
      </returns>
      <description>Returns an orthonormalized copy of the CFrame</description>
    </Function>
    <Function name="ToEulerAnglesXYZ">
      <returns>
        <number>x</number>
        <number>y</number>
        <number>z</number>
      </returns>
      <description>Returns approximate angles that could be used to generate CFrame, if angles were applied in Z, Y, X order</description>
    </Function>
    <Function name="ToEulerAnglesYXZ">
      <returns>
        <number>y</number>
        <number>x</number>
        <number>z</number>
      </returns>
      <description>Returns approximate angles that could be used to generate CFrame, if angles were applied in Z, X, Y order</description>
    </Function>
    <Function name="ToOrientation">
      <returns>
        <number>y</number>
        <number>x</number>
        <number>z</number>
      </returns>
      <description>Returns approximate angles that could be used to generate CFrame, if angles were applied in Z, X, Y order (Equivalent to ToEulerAnglesYXZ)</description>
    </Function>
    <Function name="ToAxisAngle">
      <returns>
        <Vector3></Vector3>
        <number></number>
      </returns>
      <description>Returns a tuple of a Vector3 and a number which represent the rotation of the CFrame in the axis-angle representation</description>
    </Function>
  </ItemStruct>

  <ItemStruct name="DateTime">
    <Function name="now" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <description>Create DateTime representing now.</description>
    </Function>
    <Function name="fromUnixTimestamp" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <parameters>
        <number name="unixTimestamp"></number>
      </parameters>
      <description>Create a Datetime from the given unixTimestamp. The number can range from -17987443200 to 253402300799(year 1400-9999).</description>
    </Function>
    <Function name="fromUnixTimestampMillis" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <parameters>
        <number name="unixTimestampMillis"></number>
      </parameters>
      <description>Create a Datetime from the given unixTimestampMillis. The number can range from -17987443200000 to 253402300799999.</description>
    </Function>
    <Function name="fromUniversalTime" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <parameters>
        <number name="year"></number>
        <number name="month"></number>
        <number name="day"></number>
        <number name="hour"></number>
        <number name="minute"></number>
        <number name="second"></number>
        <number name="millisecond" optional="true" default="0"></number>
      </parameters>
      <description>Create DateTime with given year, month, day, hour, minute, second and millisecond in utc time.</description>
    </Function>
    <Function name="fromLocalTime" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <parameters>
        <number name="year"></number>
        <number name="month"></number>
        <number name="day"></number>
        <number name="hour"></number>
        <number name="minute"></number>
        <number name="second"></number>
        <number name="millisecond" optional="true" default="0"></number>
      </parameters>
      <description>Create DateTime with given year, month, day, hour, minute, second and millisecond in local time.</description>
    </Function>
    <Function name="fromIsoDate" static="true">
      <returns>
        <DateTime></DateTime>
      </returns>
      <parameters>
        <string name="isoDate"></string>
      </parameters>
      <description>Create a DateTime from an ISO 8601 date-time string in utc time.</description>
    </Function>
    <Function name="ToIsoDate">
      <returns>
        <string></string>
      </returns>
      <description>Format the DateTime as an ISO 8601 date-time string.</description>
    </Function>
    <Function name="ToUniversalTime">
      <returns>
        <dictionary></dictionary>
      </returns>
      <description>Returns a table containing the components (Year, Month, Day, Hour, Minute, Second, Millisecond) of the DateTime in Universal Time Coordinated(UTC).</description>
    </Function>
    <Function name="ToLocalTime">
      <returns>
        <dictionary></dictionary>
      </returns>
      <description>Returns a table containing the components (Year, Month, Day, Hour, Minute, Second, Millisecond) of the DateTime in Local Time.</description>
    </Function>
    <Function name="FormatUniversalTime">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="format"></string>
        <string name="localeId"></string>
      </parameters>
      <description>Format the DateTime as string representation in utc time. LocaleId would fallback to "en-us" if not supported.</description>
    </Function>
    <Function name="FormatLocalTime">
      <returns>
        <string></string>
      </returns>
      <parameters>
        <string name="format"></string>
        <string name="localeId"></string>
      </parameters>
      <description>Format the DateTime as string representation in local time. LocaleId would fallback to "en-us" if not supported.</description>
    </Function>
    <Properties>
      <number name="UnixTimestamp">The number of seconds that represents the date and time of this instance, since 1970-01-01 00:00 in utc time. From -17987443200 to 253402300799(year 1400-9999).</number>
      <number name="UnixTimestampMillis">The number of milliseconds that represents the date and time of this instance, since 1970-01-01 00:00 in utc time. From -17987443200000 to 253402300799999(year 1400-9999).</number>
    </Properties>
  </ItemStruct>

  <ItemStruct name="Region3">
    <Function name="new" static="true">
      <returns>
        <Region3></Region3>
      </returns>
      <parameters>
        <Vector3 name="min"></Vector3>
        <Vector3 name="max"></Vector3>
      </parameters>
      <description>Creates a new Region3 out of two Vector3 values.</description>
    </Function>
    <Properties>
      <CFrame name="CFrame">The center location and rotation of the Region3</CFrame>
      <Vector3 name="Size">The 3D size of the Region3</Vector3>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Region3int16">
    <Function name="new" static="true">
      <returns>
        <Region3int16></Region3int16>
      </returns>
      <parameters>
        <Vector3int16 name="min"></Vector3int16>
        <Vector3int16 name="max"></Vector3int16>
      </parameters>
      <description>Creates a new Region3int16 out of two Vector3int16 structs</description>
    </Function>
  </ItemStruct>
  
  <ItemStruct name="BrickColor">
    <Function name="new" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <parameters>
        <number name="val"></number>
      </parameters>
      <description>Constructs a BrickColor from its numerical index.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <parameters>
        <number name="r"></number>
        <number name="g"></number>
        <number name="b"></number>
      </parameters>
      <description>Constructs the closest BrickColor that can be matched to the specified RGB components.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <parameters>
        <string name="val" constraint="BrickColor:any"></string>
      </parameters>
      <description>Constructs a BrickColor from its name.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <parameters>
        <Color3 name="color"></Color3>
      </parameters>
      <description>Constructs the closest BrickColor that can be matched to the specified Color3.</description>
    </Function>

    <Function name="palette" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <parameters>
        <number name="paletteValue"></number>
      </parameters>
      <description>Constructs a BrickColor from its palette index.</description>
    </Function>

    <Function name="Random" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns a random BrickColor</description>
    </Function>

    <Function name="White" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor White</description>
    </Function>

    <Function name="Gray" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Medium stone grey</description>
    </Function>

    <Function name="DarkGray" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Dark stone grey</description>
    </Function>

    <Function name="Black" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Black</description>
    </Function>

    <Function name="Red" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Bright Red</description>
    </Function>

    <Function name="Yellow">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Bright Yellow</description>
    </Function>

    <Function name="Green" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Dark Green</description>
    </Function>

    <Function name="Blue" static="true">
      <returns>
        <BrickColor></BrickColor>
      </returns>
      <description>Returns the BrickColor Bright Blue</description>
    </Function>
    
    <Properties>
      <number name="Number">The unique number that identifies the BrickColor</number>
      <string name="Name">The name associated with the BrickColor</string>
      <Color3 name="Color">The Color3 associated with the BrickColor</Color3>
      <number name="g">The red component (between 0 and 1)</number>
      <number name="r">The green component (between 0 and 1)</number>
      <number name="b">The blue component (between 0 and 1)</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Ray">
    <Function name="new" static="true">
      <returns>
        <Ray></Ray>
      </returns>
      <parameters>
        <Vector3 name="Origin"></Vector3>
        <Vector3 name="Direction"></Vector3>
      </parameters>
      <description>Creates a new Ray with given Origin and Direction</description>
    </Function>
    <Properties>
      <Vector3 name="Origin">The position of the origin</Vector3>
      <Vector3 name="Direction">The direction vector of the ray</Vector3>
      <Ray name="Unit">The Ray with a normalized direction</Ray>
    </Properties>
    <Function name="ClosestPoint" static="true">
      <returns>
        <Vector3></Vector3>
      </returns>
      <parameters>
        <Vector3 name="point"></Vector3>
      </parameters>
      <description>Returns the closest point on the Ray to point. Note Rays are unidirectional</description>
    </Function>
    <Function name="Distance" static="true">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <Vector3 name="point"></Vector3>
      </parameters>
      <description>Returns the distance from point to ClosestPoint(point)</description>
    </Function>
  </ItemStruct>
  
  <ItemStruct name="UDim">
    <Function name="new" static="true">
      <returns>
        <UDim></UDim>
      </returns>
      <parameters>
        <number name="Scale"></number>
        <number name="Offset"></number>
      </parameters>
      <description>Creates a new UDim from components</description>
    </Function>
    <Properties>
      <number name="Scale">The scale value</number>
      <number name="Offset">The offset value</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="UDim2">
    <Function name="new" static="true">
      <returns>
        <UDim2></UDim2>
      </returns>
      <parameters>
        <number name="xScale"></number>
        <number name="xOffset"></number>
        <number name="yScale"></number>
        <number name="yOffset"></number>
      </parameters>
    </Function>
    <Function name="new" static="true">
    <returns>
      <UDim2></UDim2>
    </returns>
    <parameters>
      <UDim name="x"></UDim>
      <UDim name="y"></UDim>
    </parameters>
    </Function>
    <Function name="fromOffset" static="true">
      <returns>
        <UDim2></UDim2>
      </returns>
      <parameters>
        <number name="xOffset"></number>
        <number name="yOffset"></number>
      </parameters>
    </Function>
    <Function name="fromScale" static="true">
      <returns>
        <UDim2></UDim2>
      </returns>
      <parameters>
        <number name="xScale"></number>
        <number name="yScale"></number>
      </parameters>
    </Function>
    <Properties>
      <UDim name="X">The x dimension scale and offset</UDim>
      <UDim name="Y">The y dimension scale and offset</UDim>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="TweenInfo">
    <Function name="new" static="true">
      <returns>
        <TweenInfo></TweenInfo>
      </returns>
      <parameters>
        <number name="time" optional="true" default="1.0"></number>
        <Enum.EasingStyle name="easingStyle" optional="true" default="Enum.EasingStyle.Quad"></Enum.EasingStyle>
        <Enum.EasingDirection name="easingDirection" optional="true" default="Enum.EasingDirection.Out"></Enum.EasingDirection>
        <number name="repeatCount" optional="true" default="0"></number>
        <bool name="reverses" optional="true" default="false"></bool>
        <number name="delayTime" optional="true" default="0"></number>
      </parameters>
      <description>Creates a new Tweeninfo.</description>
    </Function>
    
    <Properties>
      <number name="Time">The amount of time the tween takes in seconds.</number>
      <number name="DelayTime">The amount of time that elapses before tween starts in seconds.</number>
      <number name="RepeatCount">The number of times the tween repeats after tweening once.</number>
      <bool name="Reverses">Whether or not the tween does the reverse tween once the inital tween completes.</bool>
      <Enum.EasingStyle name="EasingStyle">The style in which the tween executes.</Enum.EasingStyle>
      <Enum.EasingDirection name="EasingDirection">The direction in which the EasingStyle executes.</Enum.EasingDirection>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Color3">
    <Function name="new" static="true">
      <returns>
        <Color3></Color3>
      </returns>
      <description>Creates a Color3 whose values are (0,0,0) [black]</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <Color3></Color3>
      </returns>
      <parameters>
        <number name="r"></number>
        <number name="g"></number>
        <number name="b"></number>
      </parameters>
      <description>Returns a Color3 with the given red, green, and blue values. The numbers can range from 0 to 1.</description>
    </Function>
    <Function name="fromRGB" static="true">
      <returns>
        <Color3></Color3>
      </returns>
      <parameters>
        <number name="r"></number>
        <number name="g"></number>
        <number name="b"></number>
      </parameters>
      <description>Creates a Color3 with the given red, green, and blue. The numbers can range from 0 to 255.</description>
    </Function>
    <Function name="fromHSV" static="true">
      <returns>
        <Color3></Color3>
      </returns>
      <parameters>
        <number name="h"></number>
        <number name="s"></number>
        <number name="v"></number>
      </parameters>
      <description>Creates a Color3 with the given hue, saturation, and value. The numbers can range from 0 to 1.</description>
    </Function>
    <Function name="toHSV" static="true">
      <returns>
        <number>H</number>
        <number>S</number>
        <number>V</number>
      </returns>
      <parameters>
        <Color3 name="color"></Color3>
      </parameters>
      <description>Returns the hue, saturation, and value of a Color3.</description>
    </Function>
    <Function name="ToHSV">
        <returns>
            <number>H</number>
            <number>S</number>
            <number>V</number>
        </returns>
        <parameters>
        </parameters>
        <description>Returns the hue, saturation, and value of a Color3.</description>
    </Function>
    <Function name="Lerp">
      <returns>
        <Color3></Color3>
      </returns>
      <parameters>
        <Color3 name="color"></Color3>
        <number name="alpha"></number>
      </parameters>
      <description>Returns a Color3 interpolated between two Color3 objects. Alpha is a number from 0 to 1.</description>
    </Function>
    <Properties>
      <number name="R">The red value of the color, from 0 to 1.</number>
      <number name="G">The green value of the color, from 0 to 1.</number>
      <number name="B">The blue value of the color, from 0 to 1.</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="ColorSequence">
    <Function name="new" static="true">
      <returns>
        <ColorSequence></ColorSequence>
      </returns>
      <parameters>
        <Color3 name="c"></Color3>
      </parameters>
      <description>Creates a sequence of two keypoints with `c` for each value</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <ColorSequence></ColorSequence>
      </returns>
      <parameters>
        <Color3 name="c0"></Color3>
        <Color3 name="c1"></Color3>
      </parameters>
      <description>Creates a sequence of two keypoints with `c0` and `c1` as the value</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <ColorSequence></ColorSequence>
      </returns>
      <parameters>
        <table name="keypoints">
          <contains>ColorSequenceKeypoint</contains>
        </table>
      </parameters>
      <description>Creates a sequence of ColorSequenceKeypoints.</description>
    </Function>
    <Properties>
      <table name="Keypoints">
        An array containing ColorSequenceKeypoint values for the ColorSequence.
        <contains>ColorSequenceKeypoint</contains>
      </table>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="NumberSequence">
    <Function name="new" static="true">
      <returns>
        <NumberSequence></NumberSequence>
      </returns>
      <parameters>
        <number name="n"></number>
      </parameters>
      <description>Creates a sequence of two keypoints with `n` for each value</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <NumberSequence></NumberSequence>
      </returns>
      <parameters>
        <number name="n0"></number>
        <number name="n1"></number>
      </parameters>
      <description>Creates a sequence of two keypoints with `n0` and `n1` as the value</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <NumberSequence></NumberSequence>
      </returns>
      <parameters>
        <table name="keypoints">
          <contains>NumberSequence.Keypoints</contains>
        </table>
      </parameters>
      <description>Creates a new Vector2int16 using ordinates x and y. Similar to Vector2, but uses integral coordinates</description>
    </Function>
    <Properties>
      <table name="keypoints">
        An array containing keypoint values for the NumberSequence
        <contains>NumberSequenceKeypoints</contains>
      </table>
    </Properties>
  </ItemStruct>  
  
  <ItemStruct name="NumberRange">
    <Function name="new" static="true">
      <returns>
        <NumberRange></NumberRange>
      </returns>
      <parameters>
        <number name="value"></number>
      </parameters>
      <description>Creates a new NumberRange with the minimum and maximum set to value.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <NumberRange></NumberRange>
      </returns>
      <parameters>
        <number name="minimum"></number>
        <number name="maximum"></number>
      </parameters>
      <description>Creates a new NumberRange with the provided minimum and maximum. minimum must be less than or equal to maximum.</description>
    </Function>
    <Properties>
      <number name="Min">Minimum value. Will always be less than or equal to the maximum.</number>
      <number name="Max">Maximum value. Will always be greater than or equal to the minimum.</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Faces">
    <Function name="new" static="true">
      <returns>
        <Faces></Faces>
      </returns>
      <parameters>
        <NormalId name="..."></NormalId>
      </parameters>
      <description>Creates a new Faces using list of faces</description>
    </Function>
    <Properties>
      <number name="Top">Whether the top face is included</number>
      <number name="Bottom">Whether the bottom face is included</number>
      <number name="Left">Whether the left face is included</number>
      <number name="Right">Whether the right face is included</number>
      <number name="Back">Whether the back face is included</number>
      <number name="Front">Whether the front face is included</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Axes">
    <Function name="new" static="true">
      <returns>
        <Axes></Axes>
      </returns>
      <parameters>
        <parameter name="...">
          <type>Axis</type>
          <type>NormalId</type>
        </parameter>
        <number name="y"></number>
      </parameters>
      <description>Creates a new Axes using list of axes and/or faces. NormalIds (faces) are converted to the corresponding axes.</description>
    </Function>
    <Properties>
      <number name="X">Whether the X axis is enabled</number>
      <number name="Y">Whether the Y axis is enabled</number>
      <number name="Z">Whether the Z axis is enabled</number>
      <number name="Top">Whether the top face is included</number>
      <number name="Bottom">Whether the bottom face is included</number>
      <number name="Left">Whether the left face is included</number>
      <number name="Right">Whether the right face is included</number>
      <number name="Back">Whether the back face is included</number>
      <number name="Front">Whether the front face is included</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="ColorSequenceKeypoint">
    <Function name="new" static="true">
      <returns>
        <ColorSequenceKeypoint></ColorSequenceKeypoint>
      </returns>
      <parameters>
        <number name="time"></number>
        <Color3 name="color"></Color3>
      </parameters>
      <description>Creates a keypoint with a specified time and color.</description>
    </Function>
    <Properties>
      <number name="Time">The relative time at which the keypoint is located.</number>
      <Color3 name="Value">The Color3 value at the keypoint.</Color3>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="NumberSequenceKeypoint">
    <Function name="new" static="true">
      <returns>
        <NumberSequenceKeypoint></NumberSequenceKeypoint>
      </returns>
      <parameters>
        <number name="time"></number>
        <number name="value"></number>
      </parameters>
      <description>Creates a keypoint with a specified time and value.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <NumberSequenceKeypoint></NumberSequenceKeypoint>
      </returns>
      <parameters>
        <number name="time"></number>
        <number name="value"></number>
        <number name="envelop"></number>
      </parameters>
      <description>Creates a keypoint with a specified time, value, and envelope.</description>
    </Function>
    <Properties>
      <number name="Envelope">Indicates the amount of variance allowed from the Value. A computed value.</number>
      <number name="Time">The relative time at which the keypoint is positioned.</number>
      <number name="Value">The base value of this keypoint.</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="Rect">
    <Function name="new" static="true">
      <returns>
        <Rect></Rect>
      </returns>
      <parameters>
        <Vector2 name="min"></Vector2>
        <Vector2 name="max"></Vector2>
      </parameters>
      <description>Constructs a new Rect with min as top left corner and max as bottom right corner.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <Rect></Rect>
      </returns>
      <parameters>
        <number name="minX"></number>
        <number name="minY"></number>
        <number name="maxX"></number>
        <number name="maxY"></number>
      </parameters>
      <description>Constructs a new Rect using minX and minY as coordinates for the top left corner, and maxX and maxY as coordinates for the bottom right corner.</description>
    </Function>
    <Properties>
      <Vector2 name="Min">The top-left corner.</Vector2>
      <Vector2 name="Max">The bottom-right corner.</Vector2>
      <number name="Width">The width of the Rect in pixels.</number>
      <number name="Height">The height of the Rect in pixels.</number>
    </Properties>
  </ItemStruct>
  
  <ItemStruct name="PhysicalProperties">
    <Function name="new" static="true">
      <returns>
        <PhysicalProperties></PhysicalProperties>
      </returns>
      <parameters>
        <Enum.Material name="material"></Enum.Material>
      </parameters>
      <description>Creates a PhysicalProperties container, with the density, friction, and elasticity specified for this Material.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <PhysicalProperties></PhysicalProperties>
      </returns>
      <parameters>
        <number name="density"></number>
        <number name="friction"></number>
        <number name="elasticity"></number>
      </parameters>
      <description>Creates a PhysicalProperties container, with the specified density, friction, and elasticity.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <PhysicalProperties></PhysicalProperties>
      </returns>
      <parameters>
        <number name="density"></number>
        <number name="friction"></number>
        <number name="elasticity"></number>
        <number name="frictionWeight"></number>
        <number name="elasticityWeight"></number>
      </parameters>
      <description>Creates a PhysicalProperties container, with the specified density, friction, and elasticity, as well as the weight of the friction and elasticity.</description>
    </Function>
    <Properties>
      <number name="Density">The density set for the custom physical properties.</number>
      <number name="Friction">The friction set for the custom physical properties.</number>
      <number name="Elasticity">The elasticity set for the custom physical properties.</number>
      <number name="FrictionWeight">The friction weight set for the custom physical properties.</number>
      <number name="ElasticityWeight">The elasticity weight set for the custom physical properties.</number>
    </Properties>
  </ItemStruct>
  <ItemStruct name="Random">
    <Function name="new" static="true">
      <returns>
        <Random></Random>
      </returns>
      <parameters>
        <number name="seed"></number>
      </parameters>
      <description>Creates a new Random object from the given seed.</description>
    </Function>
    <Function name="new" static="true">
      <returns>
        <Random></Random>
      </returns>
      <description>Creates a new Random object using a seed pulled from an internal entropy source.</description>
    </Function>
    <Function name="NextInteger">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="min"></number>
        <number name="max"></number>
      </parameters>
      <description>Returns a pseudorandom integer uniformly distributed over [min, max].</description>
    </Function>
    <Function name="NextNumber">
      <returns>
        <number></number>
      </returns>
      <description>Returns a pseudorandom number uniformly distributed over [0, 1).</description>
    </Function>
    <Function name="NextNumber">
      <returns>
        <number></number>
      </returns>
      <parameters>
        <number name="min"></number>
        <number name="max"></number>
      </parameters>
      <description>Returns a pseudorandom number uniformly distributed over [min, max).</description>
    </Function>
    <Function name="Clone">
      <returns>
        <Random></Random>
      </returns>
      <description>Returns a new Random object with the same state as the original.</description>
    </Function>
  </ItemStruct>
  <ItemStruct name="PathWaypoint">
    <Function name="new" static="true">
      <returns>
        <PathWaypoint></PathWaypoint>
      </returns>
      <parameters>
        <Vector3 name="position"></Vector3>
        <Enum.PathWaypointAction name="action"></Enum.PathWaypointAction>
      </parameters>
      <description>Creates a new PathWaypoint object.</description>
    </Function>
    <Properties>
      <Vector3 name="Position">
        The 3D position of the waypoint
      </Vector3>
      <Enum.PathWaypointAction name="Action">
        The action to be performed at this waypoint
      </Enum.PathWaypointAction>
    </Properties>
  </ItemStruct>
  <ItemStruct name="RaycastParams">
    <Function name="new" static="true">
      <returns>
        <RaycastParams></RaycastParams>
      </returns>
      <parameters>
      </parameters>
      <description>Creates a new RaycastParams object.</description>
    </Function>
    <Properties>
      <Instances name="FilterDescendantsInstances">
        Instances to ignore or whitelist while doing a raycast
      </Instances>
      <Enum.RaycastFilterType name="FilterType">
        Whether to use the filters fields of the RaycastParams as a blacklist or as a whitelist
      </Enum.RaycastFilterType>
      <bool name="IgnoreWater">
        Should a raycast ignore Terrain water
      </bool>
      <string name="CollisionGroup">
        Parts set to not collide with this group will be ignored by the raycast
      </string>
    </Properties>
  </ItemStruct>
  <ItemStruct name="RaycastResult">
    <Properties>
      <Instance name="Instance">
        The Instance the raycast hit
      </Instance>
      <number name="Distance">
        The distance from the raycast origin to the hit
      </number>
      <Vector3 name="Position">
        The position the raycast hit
      </Vector3>
      <Vector3 name="Normal">
        The surface normal at the hit position
      </Vector3>
      <Enum.PartMaterial name="Material">
        The material of the hit surface
      </Enum.PartMaterial>
    </Properties>
  </ItemStruct>
  <ItemStruct name="OverlapParams">
    <Function name="new" static="true">
      <returns>
        <OverlapParams></OverlapParams>
      </returns>
      <parameters>
      </parameters>
      <description>Creates a new OverlapParams object.</description>
    </Function>
    <Properties>
      <Instances name="FilterDescendantsInstances">
        Instances to ignore or whitelist while doing a raycast
      </Instances>
      <Enum.RaycastFilterType name="FilterType">
        Whether to use the filters fields of the OverlapParams as a blacklist or as a whitelist
      </Enum.RaycastFilterType>
      <string name="CollisionGroup">
        Parts set to not collide with this group will be ignored by the overlap query
      </string>
    </Properties>
  </ItemStruct>

  <ItemStruct name="EventInstance">
    <Function name="Connect">
      <returns>
        <RobloxScriptConnection></RobloxScriptConnection>
      </returns>
      <parameters>
        <function name="func"></function>
      </parameters>
      <description>Registers a function to call each time an event is triggered.  Returns a connection object that can be used to undo this registration.</description>
    </Function>
    <!-- Enable when ParallelLua is enabled
    <Function name="ConnectParallel">
      <returns>
        <RobloxScriptConnection></RobloxScriptConnection>
      </returns>
      <parameters>
        <function name="func"></function>
      </parameters>
      <description>Registers a function to call each time an event is triggered.  Returns a connection object that can be used to undo this registration. Dispatch will be deferred.</description>
    </Function>
    -->
    <Function name="Wait">
      <returns>
        <value></value>
      </returns>
      <description>Waits in the current thread until the function next fires, returns the same information passed to a connected function.</description>
    </Function>
  </ItemStruct>

  <ItemStruct name="RobloxScriptConnection">
    <Function name="Disconnect">
      <description>Stops the function passed to the Connect call that returned this object from being called.</description>
    </Function>
    <Properties>
      <bool name="Connected">Indicates if this connection remains active.</bool>"
    </Properties>
  </ItemStruct>

  <CoreLibrary name="core">
    <Function name="getmetatable">
      <returns>
        <dictionary></dictionary>
      </returns>
      <parameters>
        <table name="table"></table> <!-- Technically this should be either a table or a userdata - but no one uses newproxy and they can't getmetatable on our objects anyway -->
      </parameters>
      <description>Returns the metatable of the specified object if it has one, otherwise returns nil.  If the object does have a metatable, but the metatable has a __metatable field set, the value of __metatable will be returned instead. </description>
    </Function>
    <Function name="setmetatable">
      <returns>
        <dictionary></dictionary>
      </returns>
      <parameters>
        <table name="table"></table>
        <table name="metatable" optional="true"></table>
      </parameters>
      <description>Sets the metatable for the given table. If metatable is nil, the metatable of the given table is removed. If the original metatable has a "__metatable" field, this will raise an error. This function returns the table t, which was passed to the function.</description>
    </Function>
  </CoreLibrary>

  <ReservedWords>
    <Keyword name ="and" />
    <Keyword name ="break" />
    <Keyword name ="do" />
    <Keyword name ="else" />
    <Keyword name ="elseif" />
    <Keyword name ="end" />
    <Keyword name ="false" />
    <Keyword name ="for" />
    <Keyword name ="function" />
    <Keyword name ="if" />
    <Keyword name ="in" />
    <Keyword name ="local" />
    <Keyword name ="nil" />
    <Keyword name ="not" />
    <Keyword name ="or" />
    <Keyword name ="repeat" />
    <Keyword name ="return" />
    <Keyword name ="then" />
    <Keyword name ="true" />
    <Keyword name ="until" />
    <Keyword name ="while" />
    <Keyword name ="continue" />
  </ReservedWords>
</StudioAutocomplete>
